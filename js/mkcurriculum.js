// Generated by LiveScript 1.3.1
(function(){
  var root, maximum, alphabet, alphabet_set, isalpha, toclassname, create_node_display, insert_module_topic, insert_root_topic, insert_child_topic, parent_dep_sorting_func_increasing, parent_dep_sorting_func_decreasing;
  root = typeof exports != 'undefined' && exports !== null ? exports : this;
  maximum = require('prelude-ls').maximum;
  alphabet = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"].concat(["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]);
  alphabet_set = {};
  (function(){
    var i$, ref$, len$, c, results$ = [];
    for (i$ = 0, len$ = (ref$ = alphabet).length; i$ < len$; ++i$) {
      c = ref$[i$];
      results$.push(alphabet_set[c] = true);
    }
    return results$;
  })();
  isalpha = function(c){
    return alphabet_set[c] != null;
  };
  toclassname = function(name){
    return name.split('').filter(isalpha).join('');
  };
  create_node_display = function(name){
    var output;
    output = $('<div>').text(name).addClass(toclassname(name)).addClass('needtooltip').addClass('roundedbox').attr({
      depth: -1,
      'data-toggle': 'tooltip',
      'title': $('<div>').css('text-align', 'left').html((["importance: " + getnoderadius_percent(name).toPrecision(2)].concat(jsyaml.safeDump(root.rawdata[name]).split('\n'))).join('<br>'))[0].outerHTML
    });
    return output;
  };
  insert_module_topic = function(name){
    var output;
    output = create_node_display(name).attr({
      depth: -1
    }).css({
      'margin-left': '0px',
      'background-color': '#800000'
    });
    return $('#curriculum').append($('<div>').append(output));
  };
  insert_root_topic = function(name){
    var output;
    output = create_node_display(name).attr({
      depth: 0
    }).css({
      'margin-left': "20px",
      'background-color': 'black'
    });
    return $('#curriculum').append($('<div>').append(output));
  };
  insert_child_topic = function(name, relation, depth, parent){
    var output;
    output = create_node_display(name).attr({
      depth: depth
    }).css({
      'margin-left': (depth + 1) * 20 + "px",
      'background-color': getcolorforrelation(relation)
    });
    return $('<div>').append(output).insertAfter($('.' + toclassname(parent)));
  };
  parent_dep_sorting_func_increasing = function(a, b){
    var relation_order, relation_diff;
    relation_order = ['parents', 'depends'];
    relation_diff = relation_order.indexOf(a.relation) - relation_order.indexOf(b.relation);
    if (relation_diff !== 0) {
      return relation_diff;
    }
    return getnoderadius_percent(a.name) - getnoderadius_percent(b.name);
  };
  parent_dep_sorting_func_decreasing = function(a, b){
    return -parent_dep_sorting_func_increasing(a, b);
  };
  $(document).ready(function(){
    var params, topic, output, graph_file, ref$;
    root.params = params = getUrlParameters();
    topic = params.topic;
    if (topic == null) {
      $('#curriculum').text('need to provide topic');
      return;
    }
    output = [];
    graph_file = (ref$ = params.graph_file) != null ? ref$ : 'graph.yaml';
    return $.get(graph_file, function(yamltxt){
      var data;
      root.rawdata = data = create_terminal_nodes(jsyaml.safeLoad(yamltxt));
      return get_bing_counts(data, function(counts){
        var topic_name, count, i$, ref$, len$, module_name, parents_and_depends, max_depth, cur_depth, j$, ref1$, len1$, ref2$, name, relation, depth, parent;
        for (topic_name in counts) {
          count = counts[topic_name];
          root.topic_to_bing_count[topic_name] = count;
        }
        if (data[topic] == null) {
          $('#curriculum').text('topic does not exist: ' + topic);
          return;
        }
        for (i$ = 0, len$ = (ref$ = list_modules_node_is_part_of(topic)).length; i$ < len$; ++i$) {
          module_name = ref$[i$];
          insert_module_topic(module_name);
        }
        insert_root_topic(topic);
        parents_and_depends = list_parents_and_depends_recursive(topic);
        max_depth = maximum(
        parents_and_depends.map(function(it){
          return it.depth;
        }));
        for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
          cur_depth = ref$[i$];
          for (j$ = 0, len1$ = (ref1$ = parents_and_depends.filter(fn1$).sort(parent_dep_sorting_func_decreasing)).length; j$ < len1$; ++j$) {
            ref2$ = ref1$[j$], name = ref2$.name, relation = ref2$.relation, depth = ref2$.depth, parent = ref2$.parent;
            insert_child_topic(name, relation, depth, parent);
          }
        }
        return $('.needtooltip').tooltip({
          html: true,
          placement: 'right'
        });
        function fn$(){
          var i$, to$, results$ = [];
          for (i$ = 0, to$ = max_depth; i$ <= to$; ++i$) {
            results$.push(i$);
          }
          return results$;
        }
        function fn1$(x){
          return x.depth === cur_depth;
        }
      });
    });
  });
}).call(this);
