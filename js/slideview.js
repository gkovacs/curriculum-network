// Generated by LiveScript 1.3.1
(function(){
  var root, toSeconds, getSnapshotUrl, makeVideoPreview, makeVideoSnapshot, makeEmptyPreview, add_text_to_top, sanitizeName, scrollToTopic, makePreview, makeImageSection, makeFrameSection, makeSection;
  root = typeof exports != 'undefined' && exports !== null ? exports : this;
  toSeconds = function(timestamp){
    var ref$, minutes, seconds;
    if (typeof timestamp === typeof 0) {
      return timestamp;
    }
    if (timestamp.indexOf(':') === -1) {
      return parseFloat(timestamp);
    }
    ref$ = timestamp.split(':'), minutes = ref$[0], seconds = ref$[1];
    minutes = parseFloat(minutes);
    seconds = parseFloat(seconds);
    return 60 * minutes + seconds;
  };
  getSnapshotUrl = function(video, snapshot_time, width, height){
    if (width == null) {
      width = 960;
    }
    if (height == null) {
      height = 540;
    }
    return '/thumbnail?' + $.param({
      video: video,
      time: snapshot_time,
      width: width,
      height: height
    });
  };
  makeVideoPreview = function(video, vstart, vend){
    var output;
    output = makeVideoSnapshot(video, vstart, vend, 960, 540);
    return output;
  };
  makeVideoSnapshot = function(video, vstart, vend, width, height, border_radius, border_style){
    var snapshot_time, snapshot_url, output;
    if (border_radius == null) {
      border_radius = '0px';
    }
    if (border_style == null) {
      border_style = '';
    }
    vstart = toSeconds(vstart);
    vend = toSeconds(vend);
    snapshot_time = vend - 3;
    snapshot_url = getSnapshotUrl(video, snapshot_time, width, height);
    output = $('<div>').css({
      position: 'relative'
    });
    output.append($('<img>').attr('src', snapshot_url).css({
      width: width + 'px',
      height: height + 'px',
      'border-radius': border_radius,
      'border': border_style
    }));
    return output;
  };
  makeEmptyPreview = function(width, height, border_radius, border_style){
    var output;
    if (border_radius == null) {
      border_radius = '0px';
    }
    if (border_style == null) {
      border_style = '';
    }
    output = $('<div>').css({
      position: 'relative'
    });
    output.append($('<img>').css({
      width: width + 'px',
      height: height + 'px',
      'border-radius': border_radius,
      'border': border_style
    }));
    return output;
  };
  add_text_to_top = function(output, text){
    var top;
    top = $('<div>').css({
      'font-size': '20px',
      'background-color': 'black',
      'color': 'white',
      'position': 'absolute',
      'top': '0px',
      'text-align': 'center',
      'width': '320px',
      'border-radius': '15px 15px 0 0'
    });
    top.text(text);
    return output.append(top);
  };
  sanitizeName = function(name){
    var output, alphabet, i$, len$, c;
    output = [];
    alphabet = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"].concat(["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"], ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]);
    for (i$ = 0, len$ = name.length; i$ < len$; ++i$) {
      c = name[i$];
      if (alphabet.indexOf(c) !== -1) {
        output.push(c);
      }
    }
    return output.join('');
  };
  scrollToTopic = function(topic_name){
    var topic_name_sanitized, position;
    topic_name_sanitized = sanitizeName(topic_name);
    position = $('#' + topic_name_sanitized).offset().top;
    return $('html,body').animate({
      scrollTop: position
    }, 500);
  };
  makePreview = function(topic_name){
    var topic_info, video, vstart, vend, output;
    topic_info = root.rawdata[topic_name];
    video = topic_info.video, vstart = topic_info.vstart, vend = topic_info.vend;
    output = $('<div>').css({
      display: 'inline-block',
      'margin-right': '5px',
      'cursor': 'pointer'
    });
    output.click(function(){
      return scrollToTopic(topic_name);
    });
    if (video != null && vstart != null && vend != null) {
      output.append(add_text_to_top(makeVideoSnapshot(video, vstart, vend, 320, 180, '15px', '1px solid black'), topic_name));
    } else {
      output.append(add_text_to_top(makeEmptyPreview(320, 180, '15px', '1px solid black'), topic_name));
    }
    return output;
  };
  makeImageSection = function(image){
    var output;
    output = $('<img>').attr('src', image);
    return output;
  };
  makeFrameSection = function(frame){
    var output;
    output = $('<iframe>').css({
      width: '960px',
      'height': '540px',
      'border': '0px',
      'margin': '0px'
    }).attr('src', frame);
    return output;
  };
  makeSection = function(topic_name, topic_info){
    var output, topic_name_sanitized, video, vstart, vend, image, frame, parents, children, depends, i$, len$, parent, child, dependency;
    output = $('<div>').css({
      'margin-bottom': '50px'
    });
    topic_name_sanitized = sanitizeName(topic_name);
    output.append($('<div>').css({
      'font-size': '24px'
    }).text(topic_name).attr('id', topic_name_sanitized));
    video = topic_info.video, vstart = topic_info.vstart, vend = topic_info.vend, image = topic_info.image, frame = topic_info.frame, parents = topic_info.parents, children = topic_info.children, depends = topic_info.depends;
    if (video != null && vstart != null && vend != null) {
      output.append(makeVideoPreview(video, vstart, vend));
    } else if (frame != null) {
      output.append(makeFrameSection(frame));
    } else if (image != null) {
      output.append(makeImageSection(image));
    }
    if (parents != null) {
      output.append($('<div>').css({
        'font-size': '18px'
      }).text('Parents'));
      for (i$ = 0, len$ = parents.length; i$ < len$; ++i$) {
        parent = parents[i$];
        output.append(makePreview(parent));
      }
    }
    if (children != null) {
      output.append($('<div>').css({
        'font-size': '18px'
      }).text('Children'));
      for (i$ = 0, len$ = children.length; i$ < len$; ++i$) {
        child = children[i$];
        output.append(makePreview(child));
      }
    }
    if (depends != null) {
      output.append($('<div>').css({
        'font-size': '18px'
      }).text('Depends'));
      for (i$ = 0, len$ = depends.length; i$ < len$; ++i$) {
        dependency = depends[i$];
        output.append(makePreview(dependency));
      }
    }
    return output;
  };
  $(document).ready(function(){
    var params, graph_file, ref$;
    root.params = params = getUrlParameters();
    graph_file = (ref$ = params.graph_file) != null ? ref$ : 'neuralnets_slides.yaml';
    return $.get(graph_file, function(yamltxt){
      var data, topic_name, topic_info, results$ = [];
      root.rawdata = data = preprocess_data(jsyaml.safeLoad(yamltxt));
      for (topic_name in data) {
        topic_info = data[topic_name];
        results$.push($('#curriculum').append(makeSection(topic_name, topic_info)));
      }
      return results$;
    });
  });
}).call(this);
